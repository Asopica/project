plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'war'
}

group = 'com.dgrm'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8' 


repositories {
	mavenCentral()
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}





//--------------------------------------------------------
// implementation
//--------------------------------------------------------
	//  의존 라이브러리 수정시 본 모듈까지만 재빌드
	//  A(implementation) <- B <- C 일 때, C 에서 A 를 접근할 수 없음
	//  A 수정시 B 까지 재빌드
	//  A라는 모듈을 수정하게 되면, 이 모듈을 직접 의존하고 있는 B만 재빌드한다.
//--------------------------------------------------------
// Compile
//--------------------------------------------------------
	// A라는 모듈을 수정하게 되면, 이 모듈을 직접 혹은 간접 의존하고 있는 B와 C는 모두 재빌드한다.
//--------------------------------------------------------
// api
//--------------------------------------------------------
	// 수정 시 연관된 모든 모듈을 재빌드 한다. 종속된 하위 모듈 모두를 패키지에 포함한다
//--------------------------------------------------------
// compileOnly
//--------------------------------------------------------
	// Gradle이 컴파일 클래스 경로에만 종속성을 추가합니다(빌드 출력에 추가되지 않음). 
//--------------------------------------------------------
// runtimeOnly
//--------------------------------------------------------
	// Gradle이 런타임 시에 사용하도록 빌드 출력에만 종속성을 추가합니다. 
//--------------------------------------------------------
// annotationProcessor
//--------------------------------------------------------
	// 주석 프로세서인 라이브러리에 종속성을 추가하려면 반드시 annotationProcessor 구성을 사용하여 
	// 주석 프로세서 클래스 경로에 추가해야 합니다. 그 이유는 이 구성을 사용하면 컴파일 클래스 경로를 
	// 주석 프로세서 클래스 경로와 분리하여 빌드 성능을 향상할 수 있기 때문입니다. 



